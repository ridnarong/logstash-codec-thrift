#
# Autogenerated by Thrift Compiler (1.0.0-dev)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'zigbee_types'

module ZigbeeGatewayService
  class Client
    include ::Thrift::Client

    def localCommand(command)
      send_localCommand(command)
      return recv_localCommand()
    end

    def send_localCommand(command)
      send_message('localCommand', LocalCommand_args, :command => command)
    end

    def recv_localCommand()
      result = receive_message(LocalCommand_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'localCommand failed: unknown result')
    end

    def remoteCommand(command)
      send_remoteCommand(command)
      return recv_remoteCommand()
    end

    def send_remoteCommand(command)
      send_message('remoteCommand', RemoteCommand_args, :command => command)
    end

    def recv_remoteCommand()
      result = receive_message(RemoteCommand_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'remoteCommand failed: unknown result')
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_localCommand(seqid, iprot, oprot)
      args = read_args(iprot, LocalCommand_args)
      result = LocalCommand_result.new()
      result.success = @handler.localCommand(args.command)
      write_result(result, oprot, 'localCommand', seqid)
    end

    def process_remoteCommand(seqid, iprot, oprot)
      args = read_args(iprot, RemoteCommand_args)
      result = RemoteCommand_result.new()
      result.success = @handler.remoteCommand(args.command)
      write_result(result, oprot, 'remoteCommand', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class LocalCommand_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    COMMAND = 1

    FIELDS = {
      COMMAND => {:type => ::Thrift::Types::STRUCT, :name => 'command', :class => ::LocalCommandRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class LocalCommand_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::LocalCommandResponse}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RemoteCommand_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    COMMAND = 1

    FIELDS = {
      COMMAND => {:type => ::Thrift::Types::STRUCT, :name => 'command', :class => ::RemoteCommandRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RemoteCommand_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::RemoteCommandReponse}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

